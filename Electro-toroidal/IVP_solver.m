function [drhoatpi, etaatpi, tout, y] = IVP_solver(gamma, alpha, P, epsilon,y0,t_span,H,R_b)
    options = odeset('stats','off','Mass',@mass_matrix,'RelTol',1e-3,'AbsTol',1e-6);
    [tout, y] = ode45(@ode_fun,t_span,y0,options);
%     [tout, y] = ode15s(@ode_fun,t_span,y0,options);
    n = size(y,1);
    m = size(tout,1);
    if n~= m
     disp('Check. lengths of t and y are not same here!');
    end
    drhoatpi = y(n,2);
    etaatpi = y(n,3);
% Define mass matrix:

    function Mass = mass_matrix(t,y)
        
        R = 1 + gamma*cos(t);      
%         lambda1 = 1/gamma * sqrt(y(3)^2 + y(4)^2);
%         lambda2 = y(1)/R;
%         s2 = - (P * H)/R_b + 2 * lambda2 * lambda2 +...
%             2*alpha * lambda2 * lambda2 * (lambda1*lambda1 + 1/(lambda1 * lambda1 * lambda2 * lambda2))...
%             -2/(lambda1*lambda1*lambda2*lambda2) - 2*alpha*(1/(lambda1*lambda1) + 1/(lambda2*lambda2))...
%             -0.5 * epsilon * lambda1 * lambda1 * lambda2 * lambda2;
%         
        Z = sqrt(y(2)^2 + y(4)^2);
        D1 = (gamma^4*R^2)/(y(1)^2 * Z^4) - 1;       
        D2 = alpha*(y(1)^2)/(R^2) + 1;        
        A22 = -2 *(R)/(gamma^2) * D1 * D2 ...
            + 8 * D2 *(gamma^2 * y(2)^2 * R^3)/(y(1)^2 * Z^6) ...
            -(epsilon * Z * y(1)^2)/(gamma^3*R)... 
            -(epsilon*y(1)^2*y(2)^2)/(gamma^3 * Z * R);       
        A24 = 8 * D2 * (gamma^2 * y(2) * y(4) * R^3)/(y(1)^2 * Z^6) ...
            -(epsilon * y(1)^2 * y(2) * y(4))/(gamma^3 * Z * R);      
        A42 = 8 * D2 * (gamma^2 * y(2) * y(4) * R^3)/(y(1)^2 * Z^6) ...
            -(epsilon * y(1)^2 * y(2) * y(4))/(gamma^3 * Z * R);       
        A44 = -2 * (R)/(gamma^2) * D1 * D2...
            + 8 * D2 * (gamma^2 * y(4)^2 * R^3)/(y(1)^2 * Z^6)...
            -(epsilon * Z * y(1)^2)/(gamma^3 * R) ...
            - (epsilon * y(1)^2 * y(4)^2)/(gamma^3 * Z * R);       
        Mass = [1, 0, 0, 0;
                0, A22, 0, A24;
                0, 0, 1, 0;
                0, A42, 0, A44];
    end

% Define ODE:
    function dydt = ode_fun(t,y)
        R = 1 + gamma*cos(t);
        Z = sqrt(y(2)^2 + y(4)^2);
        D1 = (gamma^4*R^2)/(y(1)^2 * Z^4) - 1;
        D2 = alpha*(y(1)^2)/(R^2) + 1;
        D3 = (gamma^2*R^4)/(y(1)^4 * Z^2) - 1;
        D4 = (alpha*Z^2)/(gamma^2)+1;
        E2 = - y(1)*y(4)*P/gamma - 2*(D3*D4*y(1))/(R)...
            - 4*(D2*gamma^3*sin(t)*R^2*y(2))/(y(1)^2*Z^4) ...
            - 4*(D2*gamma^2*R^3*y(2)^2)/(y(1)^3*Z^4)...
            + 4*(alpha*D1*y(1)*y(2)^2)/(gamma^2*R)...
            + 4*(alpha*D1*sin(t)*y(1)^2*y(2))/(gamma*R^2)...
            + 2*(epsilon*Z*y(1)*y(2)^2)/(gamma^3*R)...
            + 2*(epsilon*sin(t)*Z*y(1)^2*y(2))/(gamma^2*R^2)...
            - 2*(D1*D2*sin(t)*y(2))/(gamma) ...
            - (epsilon*Z*sin(t)*y(1)^2*y(2))/(gamma^2*R^2) ...
            - (epsilon*y(1)*Z^2)/(2*gamma^2*R);         
        E4 = - 2 *(D1*D2*sin(t)*y(4))/(gamma) ...
            - (epsilon*Z*sin(t)*y(1)^2*y(4))/(gamma^2*R^2)...
            + P*y(1)*y(2)/gamma...
            - 4*(D2*gamma^2*R^3*y(2)*y(4))/(y(1)^3*Z^4)...
            + 4*(D1*alpha*y(1)*y(2)*y(4))/(R*gamma^2)...
            + 4*(D1*alpha*sin(t)*y(1)^2*y(4))/(R^2*gamma)...
            + 2*(epsilon*Z*y(1)*y(2)*y(4))/(gamma^3*R)...
            + 2*(epsilon*Z*sin(t)*y(1)^2*y(4))/(gamma^2*R^2)...
            - 4 *(D2 * R^2 * gamma^3*sin(t)*y(4))/(y(1)^2 * Z^4);
        dydt = [y(2); E2; y(4); E4];
    end

end